@using WorkerPayManager.Data
@using WorkerPayManager.Models.Workers

@inject IJSRuntime jsRuntime
@inject WorkerPayManager.Data.WorkerService workerService

<div class="modal fade" tabindex="-1" role="dialog" id="editCustomWorkerFieldModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit a custom worker field</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="EditCustomField" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (_resultMessage != null)
                    {
                        <ul class="validation-errors">
                            <li class="validation-message">@_resultMessage</li>
                        </ul>
                    }

                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="EditCustomField.Name"></InputText>
                    </div>
                    <div class="form-group">
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="EditCustomField.IsRequired" />
                            <label class="form-check-label" for="gridCheck">
                                Is Required?
                            </label>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    private string _resultMessage { get; set; }


    [Parameter]
    public Action DataChanged { get; set; }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "editCustomWorkerFieldModal");
    }

    protected override void OnInitialized()
    {
    }

    protected override void OnParametersSet()
    {
        _resultMessage = null;
    }

    [Parameter]
    public EditCustomWorkerFieldModel EditCustomField { get; set; }


    private async void HandleValidSubmit()
    {
        (bool, string) result = await workerService.EditCustomWorkerFieldAsync(EditCustomField);

        if (!result.Item1)
        {
            _resultMessage = result.Item2;
        }
        else
        {
            await CloseTaskModal();
            DataChanged?.Invoke();
        }

    }

}