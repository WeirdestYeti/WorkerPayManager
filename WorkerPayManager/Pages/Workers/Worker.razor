@page "/workers"

@using WorkerPayManager.Data
@using WorkerPayManager.Models.Workers

@inject WorkerPayManager.Data.WorkerService workerService

@attribute [Authorize]

<h3>Workers</h3>

<DeleteWorker DataChanged="updateWorkersAsync" Worker="_workerToDelete" />

<AddWorker DataChanged="updateWorkersAsync" />

<EditWorker DataChanged="updateWorkersAsync" EditWorkerModel="_editWorkerModel" />

<a class="nav-link" href="" data-toggle="modal" data-target="#addWorkerModal">
    <span class="oi oi-plus" aria-hidden="true"></span> Add A Worker
</a>



<WorkerPayManager.Pages.Templates.DataTableTemplate Items="_workers" TableClass="table table-bordered" HeaderClass="thead-dark" UseRowCount="true" PropertiesList="_propertiesList" ShowRecords="10">
    <RowTemplate>
        <td>@context.FirstName</td>
        <td>@context.LastName</td>
        <td>@context.IdentificationNumber</td>
        <td>@context.DateOfBirth.ToString("dd/MM/yyyy")</td>
        <td>@context.CreationDate.ToString("dd/MM/yyyy hh:mm:ss")</td>
        <td>
            <div class="btn-group">
                <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Action
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" href="#" data-toggle="modal" data-target="#editWorkerModal" @onclick="(() => prepareForEdit(context.Id))">Edit</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item text-danger" href="#" data-toggle="modal" data-target="#deleteWorkerModal" @onclick="(() => prepareForDelete(context))">Delete</a>
                </div>
            </div>
        </td>
    </RowTemplate>
</WorkerPayManager.Pages.Templates.DataTableTemplate>


@code {
    private List<(Func<dynamic, IComparable>, string)> _propertiesList { get; set; }

    private EditWorkerModel _editWorkerModel = new EditWorkerModel();

    private List<WorkerPayManager.Models.Workers.Worker> _workers { get; set; }

    private WorkerPayManager.Models.Workers.Worker _workerToDelete { get; set; }

    protected override void OnInitialized()
    {
        _workerToDelete = new Models.Workers.Worker();

        updateWorkersAsync();

        _propertiesList = new List<(Func<dynamic, IComparable>, string)>();
        _propertiesList.Add((x => x.FirstName, "First Name"));
        _propertiesList.Add((x => x.LastName, "Last Name"));
        _propertiesList.Add((x => x.IdentificationNumber, "Number"));
        _propertiesList.Add((x => x.DateOfBirth, "Date Of Birth"));
        _propertiesList.Add((x => x.CreationDate, "Date Created"));
        _propertiesList.Add((null, "Action"));

        createCustomWorkerFieldsFormAsync();

    }

    private async void updateWorkersAsync()
    {
        _workers = await workerService.GetWorkersAsync();
        StateHasChanged();
    }

    private async void prepareForEdit(int id)
    {
        WorkerPayManager.Models.Workers.Worker worker = _workers.SingleOrDefault(x => x.Id == id);
        if(worker != null)
        {
            _editWorkerModel = new EditWorkerModel();
            createCustomWorkerFieldsFormAsync();

            _editWorkerModel.Id = worker.Id;
            _editWorkerModel.FirstName = worker.FirstName;
            _editWorkerModel.LastName = worker.LastName;
            _editWorkerModel.IdentificationNumber = worker.IdentificationNumber;
            _editWorkerModel.BirthDate = worker.DateOfBirth;

            List<CustomWorkerFieldValue> customWorkerFieldValues = await workerService.GetCustomFieldValuesByWorkerId(worker.Id);

            for (int i = 0; i < _editWorkerModel.CustomFieldValues.Count; i++)
            {
                for (int j = 0; j < customWorkerFieldValues.Count; j++)
                {
                    if (_editWorkerModel.CustomFieldValues[i].FieldId == customWorkerFieldValues[j].CustomWorkerField.Id)
                    {
                        _editWorkerModel.CustomFieldValues[i].Value = customWorkerFieldValues[j].Value;
                    }
                }
            }
        }
    }

    private void prepareForDelete(WorkerPayManager.Models.Workers.Worker worker)
    {
        _workerToDelete = worker;
    }

    private async void createCustomWorkerFieldsFormAsync()
    {
        List<CustomWorkerField> customWorkerFields = await workerService.GetCustomWorkerFieldsAsync();

        _editWorkerModel.CustomFieldValues = new List<IAddWorkerCustomFieldModel>();

        foreach (var item in customWorkerFields)
        {
            if (item.IsRequired)
            {
                _editWorkerModel.CustomFieldValues.Add(new AddWorkerCustomFieldRequiredModel(item.Id, item.Name, item.IsRequired));
            }
            else
            {
                _editWorkerModel.CustomFieldValues.Add(new AddWorkerCustomFieldModel(item.Id, item.Name, item.IsRequired));
            }
        }

    }

}
