@using WorkerPayManager.Models.Companies
@using WorkerPayManager.Data
@inject CompanyService companyService
@inject IJSRuntime jsRuntime

<div class="modal fade" tabindex="-1" role="dialog" id="editCompanyModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit a company</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <h3>Edit Data</h3>
                <EditForm Model="@EditCompanyModel" OnValidSubmit="HandleValidEditSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (EditResultMessage != null)
                    {
                        <ul class="validation-errors">
                            <li class="validation-message">@EditResultMessage</li>
                        </ul>
                    }


                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="EditCompanyModel.Name" />
                    </div>
                    <div class="form-group">
                        <label for="customer">Customer</label>
                        <InputText id="customer" class="form-control" @bind-Value="EditCompanyModel.Customer"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="password">Confirm Password</label>
                        <InputText type="password" id="oldPassword" class="form-control" @bind-Value="EditCompanyModel.ConfirPassword"></InputText>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
                <br />
                <h3>Change Password</h3>
                <EditForm Model="@ChangeCompPasswordModel" OnValidSubmit="HandleValidChangePasswordSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (ChangePasswordResultMessage != null)
                    {
                        <ul class="validation-errors">
                            <li class="validation-message">@ChangePasswordResultMessage</li>
                        </ul>
                    }

                    <div class="form-group">
                        <label for="password">Old Password</label>
                        <InputText type="password" id="oldPassword" class="form-control" @bind-Value="ChangeCompPasswordModel.OldPassword"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="password"> New Password</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="ChangeCompPasswordModel.Password"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm New Password</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="ChangeCompPasswordModel.ConfirmPassword"></InputText>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    public string EditResultMessage { get; set; }

    public string ChangePasswordResultMessage { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    public EditCompanyModel EditCompanyModel { get; set; }

    public ChangeCompanyPasswordModel ChangeCompPasswordModel { get; set; }

    [Parameter]
    public WorkerPayManager.Models.Companies.Company EditCompanyObject {get;set;}

    protected override void OnInitialized()
    {
    }

    protected override void OnParametersSet()
    {
        EditResultMessage = null;
        ChangePasswordResultMessage = null;
        EditCompanyModel = new EditCompanyModel();
        ChangeCompPasswordModel = new ChangeCompanyPasswordModel();
        EditCompanyModel.Name = EditCompanyObject.Name;
        EditCompanyModel.Customer = EditCompanyObject.Customer;
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "editCompanyModal");
    }

    private async void HandleValidEditSubmit()
    {
        EditCompanyModel.Id = EditCompanyObject.Id;

        (bool, string) result = await companyService.EditCompanyAsync(EditCompanyModel);

        if (!result.Item1)
        {
            EditResultMessage = result.Item2;

            return;
        }
        else
        {
            await CloseTaskModal();
            DataChanged?.Invoke();
        }

    }

    private async void HandleValidChangePasswordSubmit()
    {
        ChangeCompPasswordModel.Id = EditCompanyObject.Id;

        (bool, string) result = await companyService.ChangePasswordAsync(ChangeCompPasswordModel);

        if (!result.Item1)
        {
            ChangePasswordResultMessage = result.Item2;

            return;
        }
        else
        {
            await CloseTaskModal();
            DataChanged?.Invoke();
        }

    }
}
