@using WorkerPayManager.Models.Companies
@using WorkerPayManager.Data
@inject CompanyService companyService
<h1>Companies</h1>

<AddCompany DataChanged="GetCompanies" />

<EditCompany DataChanged="GetCompanies" EditCompanyObject="editCompanyObject"  />

<a class="nav-link" href="" data-toggle="modal" data-target="#addCompanyModal">
    <span class="oi oi-plus" aria-hidden="true"></span> Add Company
</a>

<div class="container">
    <div class="container-fluid">
        <div class="row">
            @foreach (var item in Companies)
            {
                <div class="col-lg-4 pb-5">
                    <div class="card bg-light" >
                        <div class="card-header">
                            Company: @item.Name
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item bg-light">Customer: @item.Customer</li>
                            <li class="list-group-item bg-light"> <input type="password" id="password" placeholder="Password" class="form-control" /></li>
                        </ul>
                        <div class="card-body text-center">

                            <a href="#" class="btn btn-primary btn-sm" role="button" aria-pressed="true">Select</a>
                            <a href="" class="btn btn-secondary btn-sm" role="button" aria-pressed="true" data-toggle="modal" data-target="#editCompanyModal" @onclick="(() => PrepareForEdit(item))">Edit</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code{

    private List<WorkerPayManager.Models.Companies.Company> Companies;

    WorkerPayManager.Models.Companies.Company editCompanyObject = new Models.Companies.Company();

    protected override async Task OnInitializedAsync()
    {
        Companies = await companyService.GetCompaniesForAccountAsync();
    }

    private async void GetCompanies()
    {
        Companies = await companyService.GetCompaniesForAccountAsync();
        StateHasChanged();
    }


    private void PrepareForEdit(WorkerPayManager.Models.Companies.Company company)
    {
        editCompanyObject = company;
    }

}
